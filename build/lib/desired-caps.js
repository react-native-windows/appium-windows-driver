"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.desiredCapConstraints = void 0;

require("source-map-support/register");

const desiredCapConstraints = {
  platformName: {
    presence: true,
    isString: true,
    inclusionCaseInsensitive: ['Windows']
  },
  browserName: {
    isString: true
  },
  app: {
    isString: true
  },
  launchTimeout: {},
  createSessionTimeout: {
    isNumber: true
  },
  calendarFormat: {
    isString: true
  },
  bundleId: {
    isString: true
  },
  udid: {
    isString: true
  },
  locationServicesEnabled: {
    isBoolean: true
  },
  locationServicesAuthorized: {
    isBoolean: true
  },
  autoAcceptAlerts: {
    isBoolean: true
  },
  autoDismissAlerts: {
    isBoolean: true
  },
  nativeInstrumentsLib: {
    isBoolean: true
  },
  nativeWebTap: {
    isBoolean: true
  },
  safariInitialUrl: {
    isString: true
  },
  safariAllowPopups: {
    isBoolean: true
  },
  safariIgnoreFraudWarning: {
    isBoolean: true
  },
  safariOpenLinksInBackground: {
    isBoolean: true
  },
  keepKeyChains: {
    isBoolean: true
  },
  localizableStringsDir: {
    isString: true
  },
  processArguments: {},
  interKeyDelay: {
    isNumber: true
  },
  showIOSLog: {
    isBoolean: true
  },
  sendKeyStrategy: {
    isString: true,
    inclusion: ['oneByOne', 'grouped', 'setValue']
  },
  screenshotWaitTimeout: {
    isNumber: true
  },
  waitForAppScript: {
    isString: true
  },
  webviewConnectRetries: {
    isNumber: true
  },
  appName: {
    isString: true
  }
};
exports.desiredCapConstraints = desiredCapConstraints;
var _default = desiredCapConstraints;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXNpcmVkLWNhcHMuanMiXSwibmFtZXMiOlsiZGVzaXJlZENhcENvbnN0cmFpbnRzIiwicGxhdGZvcm1OYW1lIiwicHJlc2VuY2UiLCJpc1N0cmluZyIsImluY2x1c2lvbkNhc2VJbnNlbnNpdGl2ZSIsImJyb3dzZXJOYW1lIiwiYXBwIiwibGF1bmNoVGltZW91dCIsImNyZWF0ZVNlc3Npb25UaW1lb3V0IiwiaXNOdW1iZXIiLCJjYWxlbmRhckZvcm1hdCIsImJ1bmRsZUlkIiwidWRpZCIsImxvY2F0aW9uU2VydmljZXNFbmFibGVkIiwiaXNCb29sZWFuIiwibG9jYXRpb25TZXJ2aWNlc0F1dGhvcml6ZWQiLCJhdXRvQWNjZXB0QWxlcnRzIiwiYXV0b0Rpc21pc3NBbGVydHMiLCJuYXRpdmVJbnN0cnVtZW50c0xpYiIsIm5hdGl2ZVdlYlRhcCIsInNhZmFyaUluaXRpYWxVcmwiLCJzYWZhcmlBbGxvd1BvcHVwcyIsInNhZmFyaUlnbm9yZUZyYXVkV2FybmluZyIsInNhZmFyaU9wZW5MaW5rc0luQmFja2dyb3VuZCIsImtlZXBLZXlDaGFpbnMiLCJsb2NhbGl6YWJsZVN0cmluZ3NEaXIiLCJwcm9jZXNzQXJndW1lbnRzIiwiaW50ZXJLZXlEZWxheSIsInNob3dJT1NMb2ciLCJzZW5kS2V5U3RyYXRlZ3kiLCJpbmNsdXNpb24iLCJzY3JlZW5zaG90V2FpdFRpbWVvdXQiLCJ3YWl0Rm9yQXBwU2NyaXB0Iiwid2Vidmlld0Nvbm5lY3RSZXRyaWVzIiwiYXBwTmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBRUEsTUFBTUEscUJBQXFCLEdBQUc7QUFDNUJDLEVBQUFBLFlBQVksRUFBRTtBQUNaQyxJQUFBQSxRQUFRLEVBQUUsSUFERTtBQUVaQyxJQUFBQSxRQUFRLEVBQUUsSUFGRTtBQUdaQyxJQUFBQSx3QkFBd0IsRUFBRSxDQUFDLFNBQUQ7QUFIZCxHQURjO0FBTTVCQyxFQUFBQSxXQUFXLEVBQUU7QUFDWEYsSUFBQUEsUUFBUSxFQUFFO0FBREMsR0FOZTtBQVM1QkcsRUFBQUEsR0FBRyxFQUFFO0FBQ0hILElBQUFBLFFBQVEsRUFBRTtBQURQLEdBVHVCO0FBYTVCSSxFQUFBQSxhQUFhLEVBQUUsRUFiYTtBQWlCNUJDLEVBQUFBLG9CQUFvQixFQUFFO0FBQ3BCQyxJQUFBQSxRQUFRLEVBQUU7QUFEVSxHQWpCTTtBQW9CNUJDLEVBQUFBLGNBQWMsRUFBRTtBQUNkUCxJQUFBQSxRQUFRLEVBQUU7QUFESSxHQXBCWTtBQXVCNUJRLEVBQUFBLFFBQVEsRUFBRTtBQUNSUixJQUFBQSxRQUFRLEVBQUU7QUFERixHQXZCa0I7QUEwQjVCUyxFQUFBQSxJQUFJLEVBQUU7QUFDSlQsSUFBQUEsUUFBUSxFQUFFO0FBRE4sR0ExQnNCO0FBNkI1QlUsRUFBQUEsdUJBQXVCLEVBQUU7QUFDdkJDLElBQUFBLFNBQVMsRUFBRTtBQURZLEdBN0JHO0FBZ0M1QkMsRUFBQUEsMEJBQTBCLEVBQUU7QUFDMUJELElBQUFBLFNBQVMsRUFBRTtBQURlLEdBaENBO0FBbUM1QkUsRUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJGLElBQUFBLFNBQVMsRUFBRTtBQURLLEdBbkNVO0FBc0M1QkcsRUFBQUEsaUJBQWlCLEVBQUU7QUFDakJILElBQUFBLFNBQVMsRUFBRTtBQURNLEdBdENTO0FBeUM1QkksRUFBQUEsb0JBQW9CLEVBQUU7QUFDcEJKLElBQUFBLFNBQVMsRUFBRTtBQURTLEdBekNNO0FBNEM1QkssRUFBQUEsWUFBWSxFQUFFO0FBQ1pMLElBQUFBLFNBQVMsRUFBRTtBQURDLEdBNUNjO0FBK0M1Qk0sRUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJqQixJQUFBQSxRQUFRLEVBQUU7QUFETSxHQS9DVTtBQWtENUJrQixFQUFBQSxpQkFBaUIsRUFBRTtBQUNqQlAsSUFBQUEsU0FBUyxFQUFFO0FBRE0sR0FsRFM7QUFxRDVCUSxFQUFBQSx3QkFBd0IsRUFBRTtBQUN4QlIsSUFBQUEsU0FBUyxFQUFFO0FBRGEsR0FyREU7QUF3RDVCUyxFQUFBQSwyQkFBMkIsRUFBRTtBQUMzQlQsSUFBQUEsU0FBUyxFQUFFO0FBRGdCLEdBeEREO0FBMkQ1QlUsRUFBQUEsYUFBYSxFQUFFO0FBQ2JWLElBQUFBLFNBQVMsRUFBRTtBQURFLEdBM0RhO0FBOEQ1QlcsRUFBQUEscUJBQXFCLEVBQUU7QUFDckJ0QixJQUFBQSxRQUFRLEVBQUU7QUFEVyxHQTlESztBQWlFNUJ1QixFQUFBQSxnQkFBZ0IsRUFBRSxFQWpFVTtBQXFFNUJDLEVBQUFBLGFBQWEsRUFBRTtBQUNibEIsSUFBQUEsUUFBUSxFQUFFO0FBREcsR0FyRWE7QUF3RTVCbUIsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZkLElBQUFBLFNBQVMsRUFBRTtBQURELEdBeEVnQjtBQTJFNUJlLEVBQUFBLGVBQWUsRUFBRTtBQUNmMUIsSUFBQUEsUUFBUSxFQUFFLElBREs7QUFFZjJCLElBQUFBLFNBQVMsRUFBRSxDQUFDLFVBQUQsRUFBYSxTQUFiLEVBQXdCLFVBQXhCO0FBRkksR0EzRVc7QUErRTVCQyxFQUFBQSxxQkFBcUIsRUFBRTtBQUNyQnRCLElBQUFBLFFBQVEsRUFBRTtBQURXLEdBL0VLO0FBa0Y1QnVCLEVBQUFBLGdCQUFnQixFQUFFO0FBQ2hCN0IsSUFBQUEsUUFBUSxFQUFFO0FBRE0sR0FsRlU7QUFxRjVCOEIsRUFBQUEscUJBQXFCLEVBQUU7QUFDckJ4QixJQUFBQSxRQUFRLEVBQUU7QUFEVyxHQXJGSztBQXdGNUJ5QixFQUFBQSxPQUFPLEVBQUU7QUFDUC9CLElBQUFBLFFBQVEsRUFBRTtBQURIO0FBeEZtQixDQUE5Qjs7ZUE4RmVILHFCIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5jb25zdCBkZXNpcmVkQ2FwQ29uc3RyYWludHMgPSB7XHJcbiAgcGxhdGZvcm1OYW1lOiB7XHJcbiAgICBwcmVzZW5jZTogdHJ1ZSxcclxuICAgIGlzU3RyaW5nOiB0cnVlLFxyXG4gICAgaW5jbHVzaW9uQ2FzZUluc2Vuc2l0aXZlOiBbJ1dpbmRvd3MnXVxyXG4gIH0sXHJcbiAgYnJvd3Nlck5hbWU6IHtcclxuICAgIGlzU3RyaW5nOiB0cnVlXHJcbiAgfSxcclxuICBhcHA6IHtcclxuICAgIGlzU3RyaW5nOiB0cnVlXHJcbiAgfSxcclxuXHJcbiAgbGF1bmNoVGltZW91dDoge1xyXG4gICAgLy8gcmVjb2duaXplIHRoZSBjYXAsXHJcbiAgICAvLyBidXQgdmFsaWRhdGUgaW4gdGhlIGRyaXZlciN2YWxpZGF0ZURlc2lyZWRDYXBzIG1ldGhvZFxyXG4gIH0sXHJcbiAgY3JlYXRlU2Vzc2lvblRpbWVvdXQ6IHtcclxuICAgIGlzTnVtYmVyOiB0cnVlXHJcbiAgfSxcclxuICBjYWxlbmRhckZvcm1hdDoge1xyXG4gICAgaXNTdHJpbmc6IHRydWVcclxuICB9LFxyXG4gIGJ1bmRsZUlkOiB7XHJcbiAgICBpc1N0cmluZzogdHJ1ZVxyXG4gIH0sXHJcbiAgdWRpZDoge1xyXG4gICAgaXNTdHJpbmc6IHRydWVcclxuICB9LFxyXG4gIGxvY2F0aW9uU2VydmljZXNFbmFibGVkOiB7XHJcbiAgICBpc0Jvb2xlYW46IHRydWVcclxuICB9LFxyXG4gIGxvY2F0aW9uU2VydmljZXNBdXRob3JpemVkOiB7XHJcbiAgICBpc0Jvb2xlYW46IHRydWVcclxuICB9LFxyXG4gIGF1dG9BY2NlcHRBbGVydHM6IHtcclxuICAgIGlzQm9vbGVhbjogdHJ1ZVxyXG4gIH0sXHJcbiAgYXV0b0Rpc21pc3NBbGVydHM6IHtcclxuICAgIGlzQm9vbGVhbjogdHJ1ZVxyXG4gIH0sXHJcbiAgbmF0aXZlSW5zdHJ1bWVudHNMaWI6IHtcclxuICAgIGlzQm9vbGVhbjogdHJ1ZVxyXG4gIH0sXHJcbiAgbmF0aXZlV2ViVGFwOiB7XHJcbiAgICBpc0Jvb2xlYW46IHRydWVcclxuICB9LFxyXG4gIHNhZmFyaUluaXRpYWxVcmw6IHtcclxuICAgIGlzU3RyaW5nOiB0cnVlXHJcbiAgfSxcclxuICBzYWZhcmlBbGxvd1BvcHVwczoge1xyXG4gICAgaXNCb29sZWFuOiB0cnVlXHJcbiAgfSxcclxuICBzYWZhcmlJZ25vcmVGcmF1ZFdhcm5pbmc6IHtcclxuICAgIGlzQm9vbGVhbjogdHJ1ZVxyXG4gIH0sXHJcbiAgc2FmYXJpT3BlbkxpbmtzSW5CYWNrZ3JvdW5kOiB7XHJcbiAgICBpc0Jvb2xlYW46IHRydWVcclxuICB9LFxyXG4gIGtlZXBLZXlDaGFpbnM6IHtcclxuICAgIGlzQm9vbGVhbjogdHJ1ZVxyXG4gIH0sXHJcbiAgbG9jYWxpemFibGVTdHJpbmdzRGlyOiB7XHJcbiAgICBpc1N0cmluZzogdHJ1ZVxyXG4gIH0sXHJcbiAgcHJvY2Vzc0FyZ3VtZW50czoge1xyXG4gICAgLy8gcmVjb2duaXplIHRoZSBjYXAsXHJcbiAgICAvLyBidXQgdmFsaWRhdGUgaW4gdGhlIGRyaXZlciN2YWxpZGF0ZURlc2lyZWRDYXBzIG1ldGhvZFxyXG4gIH0sXHJcbiAgaW50ZXJLZXlEZWxheToge1xyXG4gICAgaXNOdW1iZXI6IHRydWVcclxuICB9LFxyXG4gIHNob3dJT1NMb2c6IHtcclxuICAgIGlzQm9vbGVhbjogdHJ1ZVxyXG4gIH0sXHJcbiAgc2VuZEtleVN0cmF0ZWd5OiB7XHJcbiAgICBpc1N0cmluZzogdHJ1ZSxcclxuICAgIGluY2x1c2lvbjogWydvbmVCeU9uZScsICdncm91cGVkJywgJ3NldFZhbHVlJ11cclxuICB9LFxyXG4gIHNjcmVlbnNob3RXYWl0VGltZW91dDoge1xyXG4gICAgaXNOdW1iZXI6IHRydWVcclxuICB9LFxyXG4gIHdhaXRGb3JBcHBTY3JpcHQ6IHtcclxuICAgIGlzU3RyaW5nOiB0cnVlXHJcbiAgfSxcclxuICB3ZWJ2aWV3Q29ubmVjdFJldHJpZXM6IHtcclxuICAgIGlzTnVtYmVyOiB0cnVlXHJcbiAgfSxcclxuICBhcHBOYW1lOiB7XHJcbiAgICBpc1N0cmluZzogdHJ1ZVxyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCB7IGRlc2lyZWRDYXBDb25zdHJhaW50cyB9O1xyXG5leHBvcnQgZGVmYXVsdCBkZXNpcmVkQ2FwQ29uc3RyYWludHM7XHJcbiJdLCJmaWxlIjoibGliL2Rlc2lyZWQtY2Fwcy5qcyIsInNvdXJjZVJvb3QiOiIuLlxcLi4ifQ==
