"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.downloadWAD = downloadWAD;
exports.setupWAD = setupWAD;
exports.verifyWAD = verifyWAD;
exports.installWAD = installWAD;
exports.default = exports.WAD_GUID = exports.WAD_INSTALL_PATH = void 0;

require("source-map-support/register");

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

const WAD_VER = '1.2-RC';
const WAD_DL = `https://github.com/Microsoft/WinAppDriver/releases/download/v${WAD_VER}/WindowsApplicationDriver.msi`;
const WAD_DL_MD5 = 'dbaa9a3f7416c2b73cc5cd0e7452c8d0';
let WAD_INSTALL_PATH = process.env['ProgramFiles(x86)'] || process.env.ProgramFiles || 'C:\\Program Files';
exports.WAD_INSTALL_PATH = WAD_INSTALL_PATH;
exports.WAD_INSTALL_PATH = WAD_INSTALL_PATH = _path.default.resolve(WAD_INSTALL_PATH, 'Windows Application Driver', 'WinAppDriver.exe');
const WAD_EXE_MD5 = '50d694ebfaa622ef7e4061c1bf52efe6';
const WAD_GUID = 'DDCD58BF-37CF-4758-A15E-A60E7CF20E41';
exports.WAD_GUID = WAD_GUID;

async function downloadWAD() {
  _logger.default.info(`Opening temp file to write WinAppDriver to...`);

  let tempFile = _path.default.resolve(process.env.TEMP, 'WinAppDriver.msi');

  _logger.default.info(`Will write to ${tempFile}`);

  _logger.default.info(`Downloading ${WAD_DL}...`);

  let body = await _requestPromise.default.get({
    url: WAD_DL,
    encoding: 'binary'
  });

  _logger.default.info(`Writing binary content to ${tempFile}...`);

  await _appiumSupport.fs.writeFile(tempFile, body, {
    encoding: 'binary'
  });
  let downloadedMd5 = await _appiumSupport.fs.md5(tempFile);

  if (downloadedMd5 !== WAD_DL_MD5) {
    throw new Error(`Checksum validation error: expected ${WAD_DL_MD5} but ` + `got ${downloadedMd5}`);
  }

  return tempFile;
}

async function installWAD(msiPath) {
  _logger.default.info(`Running MSI installer...`);

  await (0, _teen_process.exec)('msiexec', ['/i', msiPath, '/qn']);
}

async function verifyWAD() {
  _logger.default.info(`You must use WinAppDriver version ${WAD_VER}`);

  _logger.default.info(`Verifying WinAppDriver version ${WAD_VER} is installed via comparing the checksum.`);

  return (await _appiumSupport.fs.exists(WAD_INSTALL_PATH)) && (await _appiumSupport.fs.md5(WAD_INSTALL_PATH)) === WAD_EXE_MD5;
}

async function isAdmin() {
  let testFilePath = _path.default.resolve('/', 'Windows', 'System32', 'wad-test.txt');

  try {
    await _appiumSupport.fs.rimraf(testFilePath);
    await _appiumSupport.fs.writeFile(testFilePath, 'foo');
    return true;
  } catch (ign) {
    return false;
  }
}

async function setupWAD() {
  if (!_appiumSupport.system.isWindows()) {
    throw new Error(`Can only download WinAppDriver on Windows!`);
  }

  if (await verifyWAD()) {
    _logger.default.info(`WinAppDriver.exe version ${WAD_VER} already exists with correct checksum, not re-downloading`);

    return;
  }

  _logger.default.info(`WinAppDriver.exe doesn't exist at the correct version ${WAD_VER}, setting up`);

  if (!(await isAdmin())) {
    throw new Error(`WARNING: You are not running as an administrator so WinAppDriver cannot be installed for you; please reinstall as admin`);
  }

  const msiPath = await downloadWAD();
  await installWAD(msiPath);

  if (!(await verifyWAD())) {
    throw new Error(`Installed version of WinAppDriver failed checksum check`);
  }
}

var _default = setupWAD;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pbnN0YWxsZXIuanMiXSwibmFtZXMiOlsiV0FEX1ZFUiIsIldBRF9ETCIsIldBRF9ETF9NRDUiLCJXQURfSU5TVEFMTF9QQVRIIiwicHJvY2VzcyIsImVudiIsIlByb2dyYW1GaWxlcyIsInBhdGgiLCJyZXNvbHZlIiwiV0FEX0VYRV9NRDUiLCJXQURfR1VJRCIsImRvd25sb2FkV0FEIiwibG9nIiwiaW5mbyIsInRlbXBGaWxlIiwiVEVNUCIsImJvZHkiLCJyZXF1ZXN0IiwiZ2V0IiwidXJsIiwiZW5jb2RpbmciLCJmcyIsIndyaXRlRmlsZSIsImRvd25sb2FkZWRNZDUiLCJtZDUiLCJFcnJvciIsImluc3RhbGxXQUQiLCJtc2lQYXRoIiwidmVyaWZ5V0FEIiwiZXhpc3RzIiwiaXNBZG1pbiIsInRlc3RGaWxlUGF0aCIsInJpbXJhZiIsImlnbiIsInNldHVwV0FEIiwic3lzdGVtIiwiaXNXaW5kb3dzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxPQUFPLEdBQUcsUUFBaEI7QUFDQSxNQUFNQyxNQUFNLEdBQUksZ0VBQStERCxPQUFRLCtCQUF2RjtBQUNBLE1BQU1FLFVBQVUsR0FBRyxrQ0FBbkI7QUFFQSxJQUFJQyxnQkFBZ0IsR0FBR0MsT0FBTyxDQUFDQyxHQUFSLENBQVksbUJBQVosS0FBb0NELE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxZQUFoRCxJQUFnRSxtQkFBdkY7O0FBQ0EsMkJBQUFILGdCQUFnQixHQUFHSSxjQUFLQyxPQUFMLENBQWFMLGdCQUFiLEVBQStCLDRCQUEvQixFQUNhLGtCQURiLENBQW5CO0FBRUEsTUFBTU0sV0FBVyxHQUFHLGtDQUFwQjtBQUNBLE1BQU1DLFFBQVEsR0FBRyxzQ0FBakI7OztBQUVBLGVBQWVDLFdBQWYsR0FBOEI7QUFDNUJDLGtCQUFJQyxJQUFKLENBQVUsK0NBQVY7O0FBQ0EsTUFBSUMsUUFBUSxHQUFHUCxjQUFLQyxPQUFM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dGVtLCBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcclxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xyXG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcclxuXHJcbmNvbnN0IFdBRF9WRVIgPSAnMS4yLVJDJztcclxuY29uc3QgV0FEX0RMID0gYGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvV2luQXBwRHJpdmVyL3JlbGVhc2VzL2Rvd25sb2FkL3Yke1dBRF9WRVJ9L1dpbmRvd3NBcHBsaWNhdGlvbkRyaXZlci5tc2lgO1xyXG5jb25zdCBXQURfRExfTUQ1ID0gJ2RiYWE5YTNmNzQxNmMyYjczY2M1Y2QwZTc0NTJjOGQwJztcclxuXHJcbmxldCBXQURfSU5TVEFMTF9QQVRIID0gcHJvY2Vzcy5lbnZbJ1Byb2dyYW1GaWxlcyh4ODYpJ10gfHwgcHJvY2Vzcy5lbnYuUHJvZ3JhbUZpbGVzIHx8ICdDOlxcXFxQcm9ncmFtIEZpbGVzJztcclxuV0FEX0lOU1RBTExfUEFUSCA9IHBhdGgucmVzb2x2ZShXQURfSU5TVEFMTF9QQVRILCAnV2luZG93cyBBcHBsaWNhdGlvbiBEcml2ZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdXaW5BcHBEcml2ZXIuZXhlJyk7XHJcbmNvbnN0IFdBRF9FWEVfTUQ1ID0gJzUwZDY5NGViZmFhNjIyZWY3ZTQwNjFjMWJmNTJlZmU2JztcclxuY29uc3QgV0FEX0dVSUQgPSAnRERDRDU4QkYtMzdDRi00NzU4LUExNUUtQTYwRTdDRjIwRTQxJztcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkV0FEICgpIHtcclxuICBsb2cuaW5mbyhgT3BlbmluZyB0ZW1wIGZpbGUgdG8gd3JpdGUgV2luQXBwRHJpdmVyIHRvLi4uYCk7XHJcbiAgbGV0IHRlbXBGaWxlID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuZW52LlRFTVAsICdXaW5BcHBEcml2ZXIubXNpJyk7XHJcbiAgbG9nLmluZm8oYFdpbGwgd3JpdGUgdG8gJHt0ZW1wRmlsZX1gKTtcclxuXHJcbiAgLy8gYWN0dWFsbHkgZG93bmxvYWQgdGhlIG1zaSBmaWxlXHJcbiAgbG9nLmluZm8oYERvd25sb2FkaW5nICR7V0FEX0RMfS4uLmApO1xyXG4gIGxldCBib2R5ID0gYXdhaXQgcmVxdWVzdC5nZXQoe3VybDogV0FEX0RMLCBlbmNvZGluZzogJ2JpbmFyeSd9KTtcclxuICBsb2cuaW5mbyhgV3JpdGluZyBiaW5hcnkgY29udGVudCB0byAke3RlbXBGaWxlfS4uLmApO1xyXG4gIGF3YWl0IGZzLndyaXRlRmlsZSh0ZW1wRmlsZSwgYm9keSwge2VuY29kaW5nOiAnYmluYXJ5J30pO1xyXG5cclxuICAvLyB2YWxpZGF0ZSBjaGVja3N1bVxyXG4gIGxldCBkb3dubG9hZGVkTWQ1ID0gYXdhaXQgZnMubWQ1KHRlbXBGaWxlKTtcclxuICBpZiAoZG93bmxvYWRlZE1kNSAhPT0gV0FEX0RMX01ENSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBDaGVja3N1bSB2YWxpZGF0aW9uIGVycm9yOiBleHBlY3RlZCAke1dBRF9ETF9NRDV9IGJ1dCBgICtcclxuICAgICAgICAgICAgICAgICAgICBgZ290ICR7ZG93bmxvYWRlZE1kNX1gKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0ZW1wRmlsZTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gaW5zdGFsbFdBRCAobXNpUGF0aCkge1xyXG4gIGxvZy5pbmZvKGBSdW5uaW5nIE1TSSBpbnN0YWxsZXIuLi5gKTtcclxuICBhd2FpdCBleGVjKCdtc2lleGVjJywgWycvaScsIG1zaVBhdGgsICcvcW4nXSk7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHZlcmlmeVdBRCAoKSB7XHJcbiAgbG9nLmluZm8oYFlvdSBtdXN0IHVzZSBXaW5BcHBEcml2ZXIgdmVyc2lvbiAke1dBRF9WRVJ9YCk7XHJcbiAgbG9nLmluZm8oYFZlcmlmeWluZyBXaW5BcHBEcml2ZXIgdmVyc2lvbiAke1dBRF9WRVJ9IGlzIGluc3RhbGxlZCB2aWEgY29tcGFyaW5nIHRoZSBjaGVja3N1bS5gKTtcclxuICByZXR1cm4gYXdhaXQgZnMuZXhpc3RzKFdBRF9JTlNUQUxMX1BBVEgpICYmXHJcbiAgICAgICAgIGF3YWl0IGZzLm1kNShXQURfSU5TVEFMTF9QQVRIKSA9PT0gV0FEX0VYRV9NRDU7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGlzQWRtaW4gKCkge1xyXG4gIGxldCB0ZXN0RmlsZVBhdGggPSBwYXRoLnJlc29sdmUoJy8nLCAnV2luZG93cycsICdTeXN0ZW0zMicsICd3YWQtdGVzdC50eHQnKTtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgZnMucmltcmFmKHRlc3RGaWxlUGF0aCk7XHJcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUodGVzdEZpbGVQYXRoLCAnZm9vJyk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGNhdGNoIChpZ24pIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHNldHVwV0FEICgpIHtcclxuICBpZiAoIXN5c3RlbS5pc1dpbmRvd3MoKSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW4gb25seSBkb3dubG9hZCBXaW5BcHBEcml2ZXIgb24gV2luZG93cyFgKTtcclxuICB9XHJcblxyXG4gIGlmIChhd2FpdCB2ZXJpZnlXQUQoKSkge1xyXG4gICAgbG9nLmluZm8oYFdpbkFwcERyaXZlci5leGUgdmVyc2lvbiAke1dBRF9WRVJ9IGFscmVhZHkgZXhpc3RzIHdpdGggY29ycmVjdCBjaGVja3N1bSwgbm90IHJlLWRvd25sb2FkaW5nYCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBsb2cuaW5mbyhgV2luQXBwRHJpdmVyLmV4ZSBkb2Vzbid0IGV4aXN0IGF0IHRoZSBjb3JyZWN0IHZlcnNpb24gJHtXQURfVkVSfSwgc2V0dGluZyB1cGApO1xyXG5cclxuICBpZiAoIWF3YWl0IGlzQWRtaW4oKSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBXQVJOSU5HOiBZb3UgYXJlIG5vdCBydW5uaW5nIGFzIGFuIGFkbWluaXN0cmF0b3Igc28gV2luQXBwRHJpdmVyIGNhbm5vdCBiZSBpbnN0YWxsZWQgZm9yIHlvdTsgcGxlYXNlIHJlaW5zdGFsbCBhcyBhZG1pbmApO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgbXNpUGF0aCA9IGF3YWl0IGRvd25sb2FkV0FEKCk7XHJcbiAgYXdhaXQgaW5zdGFsbFdBRChtc2lQYXRoKTtcclxuICBpZiAoIWF3YWl0IHZlcmlmeVdBRCgpKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEluc3RhbGxlZCB2ZXJzaW9uIG9mIFdpbkFwcERyaXZlciBmYWlsZWQgY2hlY2tzdW0gY2hlY2tgKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgZG93bmxvYWRXQUQsIHNldHVwV0FELCB2ZXJpZnlXQUQsIGluc3RhbGxXQUQsIFdBRF9JTlNUQUxMX1BBVEgsIFdBRF9HVUlELFxyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBzZXR1cFdBRDtcclxuIl0sImZpbGUiOiJsaWIvaW5zdGFsbGVyLmpzIiwic291cmNlUm9vdCI6Ii4uXFwuLiJ9
