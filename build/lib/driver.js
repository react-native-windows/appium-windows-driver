"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WindowsDriver = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _winappdriver = require("./winappdriver");

var _logger = _interopRequireDefault(require("./logger"));

var _desiredCaps = require("./desired-caps");

const NO_PROXY = [['POST', new RegExp('^/session/[^/]+/appium/compare_images')]];

class WindowsDriver extends _appiumBaseDriver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.desiredCapConstraints;
    this.jwpProxyActive = false;
    this.jwpProxyAvoid = NO_PROXY;
    this.opts.address = opts.address || _winappdriver.DEFAULT_WAD_HOST;
  }

  async createSession(caps, reqCaps, curSessions) {
    if (!_appiumSupport.system.isWindows()) {
      throw new Error('WinAppDriver tests only run on Windows');
    }

    try {
      let sessionId;
      [sessionId] = await super.createSession(caps);
      await this.startWinAppDriverSession(curSessions);
      return [sessionId, caps];
    } catch (e) {
      await this.deleteSession();
      throw e;
    }
  }

  getNextAvailablePort(curSessions) {
    let newWADPort = _winappdriver.DEFAULT_WAD_PORT;

    while (_lodash.default.find(curSessions, o => o.WADPort === newWADPort)) {
      newWADPort++;
    }

    return newWADPort;
  }

  async startWinAppDriverSession(curSessions) {
    this.opts.port = this.getNextAvailablePort(curSessions);
    this.winAppDriver = new _winappdriver.WinAppDriver({
      app: this.opts.app,
      port: this.opts.port
    });
    await this.winAppDriver.start();
    await this.winAppDriver.startSession(this.caps);
    this.proxyReqRes = this.winAppDriver.proxyReqRes.bind(this.winAppDriver);
    this.jwpProxyActive = true;
  }

  async deleteSession() {
    _logger.default.debug('Deleting WinAppDriver session');

    if (this.winAppDriver && this.jwpProxyActive) {
      await this.winAppDriver.deleteSession();
      await this.winAppDriver.stop();
      this.winAppDriver = null;
    }

    this.jwpProxyActive = false;
    await super.deleteSession();
  }

  proxyActive() {
    return true;
  }

  canProxy() {
    return true;
  }

  getProxyAvoidList() {
    return this.jwpProxyAvoid;
  }

  get driverData() {
    return {
      WADPort: this.opts.port
    };
  }

}

exports.WindowsDriver = WindowsDriver;
var _default = WindowsDriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kcml2ZXIuanMiXSwibmFtZXMiOlsiTk9fUFJPWFkiLCJSZWdFeHAiLCJXaW5kb3dzRHJpdmVyIiwiQmFzZURyaXZlciIsImNvbnN0cnVjdG9yIiwib3B0cyIsInNob3VsZFZhbGlkYXRlQ2FwcyIsImRlc2lyZWRDYXBDb25zdHJhaW50cyIsImp3cFByb3h5QWN0aXZlIiwiandwUHJveHlBdm9pZCIsImFkZHJlc3MiLCJERUZBVUxUX1dBRF9IT1NUIiwiY3JlYXRlU2Vzc2lvbiIsImNhcHMiLCJyZXFDYXBzIiwiY3VyU2Vzc2lvbnMiLCJzeXN0ZW0iLCJpc1dpbmRvd3MiLCJFcnJvciIsInNlc3Npb25JZCIsInN0YXJ0V2luQXBwRHJpdmVyU2Vzc2lvbiIsImUiLCJkZWxldGVTZXNzaW9uIiwiZ2V0TmV4dEF2YWlsYWJsZVBvcnQiLCJuZXdXQURQb3J0IiwiREVGQVVMVF9XQURfUE9SVCIsIl8iLCJmaW5kIiwibyIsIldBRFBvcnQiLCJwb3J0Iiwid2luQXBwRHJpdmVyIiwiV2luQXBwRHJpdmVyIiwiYXBwIiwic3RhcnQiLCJzdGFydFNlc3Npb24iLCJwcm94eVJlcVJlcyIsImJpbmQiLCJsb2dnZXIiLCJkZWJ1ZyIsInN0b3AiLCJwcm94eUFjdGl2ZSIsImNhblByb3h5IiwiZ2V0UHJveHlBdm9pZExpc3QiLCJkcml2ZXJEYXRhIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFFBQVEsR0FBRyxDQUNmLENBQUMsTUFBRCxFQUFTLElBQUlDLE1BQUosQ0FBVyx1Q0FBWCxDQUFULENBRGUsQ0FBakI7O0FBS0EsTUFBTUMsYUFBTixTQUE0QkMsNEJBQTVCLENBQXVDO0FBQ3JDQyxFQUFBQSxXQUFXLENBQUVDLElBQUksR0FBRyxFQUFULEVBQWFDLGtCQUFrQixHQUFHLElBQWxDLEVBQXdDO0FBQ2pELFVBQU1ELElBQU4sRUFBWUMsa0JBQVo7QUFDQSxTQUFLQyxxQkFB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b20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XHJcbmltcG9ydCB7IHN5c3RlbSB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcclxuaW1wb3J0IHsgV2luQXBwRHJpdmVyLCBERUZBVUxUX1dBRF9IT1NULCBERUZBVUxUX1dBRF9QT1JUIH0gZnJvbSAnLi93aW5hcHBkcml2ZXInO1xyXG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4vbG9nZ2VyJztcclxuaW1wb3J0IHsgZGVzaXJlZENhcENvbnN0cmFpbnRzIH0gZnJvbSAnLi9kZXNpcmVkLWNhcHMnO1xyXG5cclxuY29uc3QgTk9fUFJPWFkgPSBbXHJcbiAgWydQT1NUJywgbmV3IFJlZ0V4cCgnXi9zZXNzaW9uL1teL10rL2FwcGl1bS9jb21wYXJlX2ltYWdlcycpXSxcclxuXTtcclxuXHJcbi8vIEFwcGl1bSBpbnN0YW50aWF0ZXMgdGhpcyBjbGFzc1xyXG5jbGFzcyBXaW5kb3dzRHJpdmVyIGV4dGVuZHMgQmFzZURyaXZlciB7XHJcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSwgc2hvdWxkVmFsaWRhdGVDYXBzID0gdHJ1ZSkge1xyXG4gICAgc3VwZXIob3B0cywgc2hvdWxkVmFsaWRhdGVDYXBzKTtcclxuICAgIHRoaXMuZGVzaXJlZENhcENvbnN0cmFpbnRzID0gZGVzaXJlZENhcENvbnN0cmFpbnRzO1xyXG4gICAgdGhpcy5qd3BQcm94eUFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgdGhpcy5qd3BQcm94eUF2b2lkID0gTk9fUFJPWFk7XHJcbiAgICB0aGlzLm9wdHMuYWRkcmVzcyA9IG9wdHMuYWRkcmVzcyB8fCBERUZBVUxUX1dBRF9IT1NUO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgY3JlYXRlU2Vzc2lvbiAoY2FwcywgcmVxQ2FwcywgY3VyU2Vzc2lvbnMpIHtcclxuXHJcbiAgICBpZiAoIXN5c3RlbS5pc1dpbmRvd3MoKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpbkFwcERyaXZlciB0ZXN0cyBvbmx5IHJ1biBvbiBXaW5kb3dzJyk7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICBsZXQgc2Vzc2lvbklkO1xyXG4gICAgICBbc2Vzc2lvbklkXSA9IGF3YWl0IHN1cGVyLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XHJcbiAgICAgIGF3YWl0IHRoaXMuc3RhcnRXaW5BcHBEcml2ZXJTZXNzaW9uKGN1clNlc3Npb25zKTtcclxuICAgICAgcmV0dXJuIFtzZXNzaW9uSWQsIGNhcHNdO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBhd2FpdCB0aGlzLmRlbGV0ZVNlc3Npb24oKTtcclxuICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldE5leHRBdmFpbGFibGVQb3J0IChjdXJTZXNzaW9ucykge1xyXG4gICAgbGV0IG5ld1dBRFBvcnQgPSBERUZBVUxUX1dBRF9QT1JUO1xyXG5cclxuICAgIC8vIHN0YXJ0IGF0IDQ3MjQgYW5kIGdvIHVwIHRpbGwgd2UgZmluZCBhIHBvcnQgdGhhdCBpc24ndCBpbiB1c2VcclxuICAgIHdoaWxlIChfLmZpbmQoY3VyU2Vzc2lvbnMsIChvKSA9PiBvLldBRFBvcnQgPT09IG5ld1dBRFBvcnQpKSB7XHJcbiAgICAgIG5ld1dBRFBvcnQrKztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3V0FEUG9ydDtcclxuICB9XHJcblxyXG4gIGFzeW5jIHN0YXJ0V2luQXBwRHJpdmVyU2Vzc2lvbiAoY3VyU2Vzc2lvbnMpIHtcclxuXHJcbiAgICB0aGlzLm9wdHMucG9ydCA9IHRoaXMuZ2V0TmV4dEF2YWlsYWJsZVBvcnQoY3VyU2Vzc2lvbnMpO1xyXG4gICAgdGhpcy53aW5BcHBEcml2ZXIgPSBuZXcgV2luQXBwRHJpdmVyKHtcclxuICAgICAgYXBwOiB0aGlzLm9wdHMuYXBwLFxyXG4gICAgICBwb3J0OiB0aGlzLm9wdHMucG9ydFxyXG4gICAgfSk7XHJcblxyXG4gICAgYXdhaXQgdGhpcy53aW5BcHBEcml2ZXIuc3RhcnQoKTtcclxuICAgIGF3YWl0IHRoaXMud2luQXBwRHJpdmVyLnN0YXJ0U2Vzc2lvbih0aGlzLmNhcHMpO1xyXG4gICAgdGhpcy5wcm94eVJlcVJlcyA9IHRoaXMud2luQXBwRHJpdmVyLnByb3h5UmVxUmVzLmJpbmQodGhpcy53aW5BcHBEcml2ZXIpO1xyXG4gICAgLy8gbm93IHRoYXQgZXZlcnl0aGluZyBoYXMgc3RhcnRlZCBzdWNjZXNzZnVsbHksIHR1cm4gb24gcHJveHlpbmcgc28gYWxsXHJcbiAgICAvLyBzdWJzZXF1ZW50IHNlc3Npb24gcmVxdWVzdHMgZ28gc3RyYWlnaHQgdG8vZnJvbSBXaW5BcHBEcml2ZXJcclxuICAgIHRoaXMuandwUHJveHlBY3RpdmUgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZGVsZXRlU2Vzc2lvbiAoKSB7XHJcbiAgICBsb2dnZXIuZGVidWcoJ0RlbGV0aW5nIFdpbkFwcERyaXZlciBzZXNzaW9uJyk7XHJcblxyXG4gICAgaWYgKHRoaXMud2luQXBwRHJpdmVyICYmIHRoaXMuandwUHJveHlBY3RpdmUpIHtcclxuICAgICAgYXdhaXQgdGhpcy53aW5BcHBEcml2ZXIuZGVsZXRlU2Vzc2lvbigpO1xyXG4gICAgICBhd2FpdCB0aGlzLndpbkFwcERyaXZlci5zdG9wKCk7XHJcbiAgICAgIHRoaXMud2luQXBwRHJpdmVyID0gbnVsbDtcclxuICAgIH1cclxuICAgIHRoaXMuandwUHJveHlBY3RpdmUgPSBmYWxzZTtcclxuICAgIGF3YWl0IHN1cGVyLmRlbGV0ZVNlc3Npb24oKTtcclxuICB9XHJcblxyXG4gIHByb3h5QWN0aXZlICgpIHtcclxuICAgIC8vIHdlIGFsd2F5cyBoYXZlIGFuIGFjdGl2ZSBwcm94eSB0byB0aGUgV2luQXBwRHJpdmVyIHNlcnZlclxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBjYW5Qcm94eSAoKSB7XHJcbiAgICAvLyB3ZSBjYW4gYWx3YXlzIHByb3h5IHRvIHRoZSBXaW5BcHBEcml2ZXIgc2VydmVyXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGdldFByb3h5QXZvaWRMaXN0ICgvKnNlc3Npb25JZCovKSB7XHJcbiAgICByZXR1cm4gdGhpcy5qd3BQcm94eUF2b2lkO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRyaXZlckRhdGEgKCkge1xyXG4gICAgcmV0dXJuIHtXQURQb3J0OiB0aGlzLm9wdHMucG9ydH07XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBXaW5kb3dzRHJpdmVyIH07XHJcbmV4cG9ydCBkZWZhdWx0IFdpbmRvd3NEcml2ZXI7XHJcbiJdLCJmaWxlIjoibGliL2RyaXZlci5qcyIsInNvdXJjZVJvb3QiOiIuLlxcLi4ifQ==
